/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package youngfriend.main_pnl;

import com.google.common.base.Strings;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import youngfriend.App;
import youngfriend.bean.BeanDto;
import youngfriend.common.util.StringUtils;
import youngfriend.common.util.encoding.Base64;
import youngfriend.main_pnl.deleagte.InparamTableDelegateAbs;
import youngfriend.main_pnl.gui.AbstractMainPnl;
import youngfriend.main_pnl.gui.BtnModulePnl;
import youngfriend.main_pnl.gui.CommonPnl;
import youngfriend.main_pnl.gui.CommonUpdatePnl;
import youngfriend.main_pnl.gui.ServicePnl;
import youngfriend.moduletree.ModuleTreePnl;
import youngfriend.service.ModuleServiceUtil;
import youngfriend.utils.Do4objs;
import youngfriend.utils.ModuleType;
import youngfriend.utils.PubUtil;

import javax.swing.JPanel;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import static youngfriend.App.busyDoing;
import static youngfriend.moduletree.ModuleTreePnl.MODULE_TOSTRING;

/**
 * @author xiong
 */

//    {
//        "tablename": "CORP",
//            "servicename": "module2",
//            "exceptivefields": "不需返回的字段 逗号分隔",
//            "hiddenfields": "需要隐藏的字段 逗号分隔",
//            "sortfields": "排序字段 逗号分隔",
//            "inparam": [
//        {
//            "name": "CORP",
//                "label": "集团信息",
//                "inParamType": "definite",
//                "inParams": [
//            {
//                "name": "corpid",
//                    "label": "集团Id",
//                    "defaultValue": ""
//            },
//            {
//                "name": "corpcode",
//                    "label": "集团代码",
//                    "defaultValue": ""
//            }
//            ],
//            "maxLevel": "20",
//                "maxLength": "64",
//                "rootName": "授权单位名称",
//                "codeField": "corpcode",
//                "nameField": "corpname",
//                "codeInc": "1,2",
//                "propertyDefine": {}
//        }
//        ]
//    }

public class MainPnlFactory extends javax.swing.JPanel {


    private BeanDto moduleInfoBean;
    private boolean isVersion2;
    private boolean saveFlag;

    /**
     * Creates new form mainToolPnl
     */
    public MainPnlFactory(JPanel mainPnlcontainer, ModuleTreePnl moduleTreePnl) {
        initComponents();
        this.moduleTreePnl = moduleTreePnl;
        this.mainPnlcontainer = mainPnlcontainer;
        mainPnlcontainer.add(mainHeaderPnl, BorderLayout.NORTH);
        addBtnEvent();
    }


    /**
     * This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        save_btn = new javax.swing.JButton();
        reload_btn = new javax.swing.JButton();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        save_btn.setText("保存");
        add(save_btn);

        reload_btn.setText("重新加载");
        add(reload_btn);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton reload_btn;
    private javax.swing.JButton save_btn;
    // End of variables declaration//GEN-END:variables

    private final JPanel mainPnlcontainer;
    private final ModuleTreePnl moduleTreePnl;
    private final MainHeaderPnl mainHeaderPnl = new MainHeaderPnl();
    private CommonPnl commonPnl = new CommonPnl();
    private ServicePnl servicePnl = new ServicePnl();
    private BtnModulePnl btnModulePnl = new BtnModulePnl();
    private CommonUpdatePnl commonUpdatePnl = new CommonUpdatePnl();
    private BeanDto moduleCatalogBean;
    private AbstractMainPnl mainPnl;

    private void addBtnEvent() {
        reload_btn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                if (!moduleTreePnl.isModule()) {
                    return;
                }
                if (saveFlag) {
                    moduleTreePnl.reLoadData();
                    //reload Data  ,change saveFlag
                    saveFlag = false;
                } else {
                    reLoad();
                }

            }
        });
        save_btn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                if (!moduleTreePnl.isModule()) {
                    return;
                }
                save();
            }
        });
    }

    private void getMainPnl(ModuleType moduleType) {
        switch (moduleType) {
            case COMMON:
                mainPnl = commonPnl;
                break;
            case SERVICE:
                mainPnl = servicePnl;
                break;
            case BUTTON:
                mainPnl = btnModulePnl;
                break;
            case COMMON_UPDATE:
                mainPnl = commonUpdatePnl;
                break;
        }
    }

    private boolean isCommonModule(ModuleType moduleType) {
        return moduleType == ModuleType.COMMON || moduleType == ModuleType.COMMON_UPDATE;
    }


    private void save() {
        if (!mainPnlcontainer.isVisible()) {
            //mean load datas fauile
            PubUtil.showMsg("导入数据错误,无法保存");
            return;
        }
        if (moduleInfoBean != null && !Strings.isNullOrEmpty(moduleCatalogBean.getValue("module_type")) && moduleCatalogBean.getValue("module_type").indexOf("非通用组件") != -1) {
            if (!PubUtil.showConfirm(App.instance, "非通用组件，确定修改？")) {
                return;
            }
        }
        JsonObject jsonData = getInputParamObj(moduleInfoBean);
        try {
            mainHeaderPnl.save(jsonData);
            String modulename = moduleInfoBean.getValue("name");
            String modulealias = mainHeaderPnl.getModuleAlias();
            String desc = mainHeaderPnl.getDesc();
            mainPnl.saveParam(modulename, jsonData);
            ModuleServiceUtil.saveModule(moduleInfoBean.getValue("id"), moduleCatalogBean.getValue("projectcode"), null, desc, modulealias, jsonData.toString(), null, null);
            PubUtil.showMsg("保存成功");
            saveFlag = true;
        } catch (Exception e) {
            PubUtil.showMsg("保存错误" + e.getMessage());
        }
    }

    public void loadData(final BeanDto moduleCatalogBean, final BeanDto moduleInfoBean, final boolean isversion2) {
        saveFlag = false;
        this.moduleCatalogBean = moduleCatalogBean;
        this.moduleInfoBean = moduleInfoBean;
        this.isVersion2 = isversion2;
        reLoad();
    }

    private void removeMainPnl() {
        if (mainPnl != null) {
            mainPnl.clear();
            if (mainPnl.getParent() != null) {
                mainPnl.getParent().remove(mainPnl);
            }
            mainPnl = null;
        }
    }

    /**
     * 没保存前 重新取数据
     */
    public void reLoad() {
        this.setVisible(false);
        mainPnlcontainer.setVisible(false);
        removeMainPnl();
        if (moduleInfoBean == null) {
            return;
        }
        busyDoing(new Do4objs() {

            @Override
            public void do4ojbs(Object... objs) throws Exception {
                try {
                    if (moduleInfoBean == null) {
                        return;
                    }
                    List<BeanDto> servicebeans = null;
                    if (isVersion2) {
                        moduleCatalogBean.setItem("module_type", "(2.0服务)");
                        moduleCatalogBean.setToString(MODULE_TOSTRING);
                        moduleTreePnl.selectNodeChange();
                        if (PubUtil.serviceBeans_2 == null) {
                            PubUtil.setServe2Url();
                        }
                        servicebeans = PubUtil.serviceBeans_2;
                    } else {
                        servicebeans = PubUtil.serviceBeans;
                    }
                    if (servicebeans == null || servicebeans.isEmpty()) {
                        throw new RuntimeException("获取服务列表为空");
                    }
                    JsonObject jsonData = getInputParamObj(moduleInfoBean);
                    if (jsonData == null) {
                        return;
                    }

                    ModuleType moduleType = moduleTreePnl.getModuleType();
                    //getMainPnl then disinguish common
                    mainHeaderPnl.load(servicebeans, jsonData, moduleType, moduleInfoBean, isCommonModule(moduleType), moduleTreePnl.isVersion2());
                    //after mainHead data load show save|reload toobar
                    setVisible(true);
                    getMainPnl(moduleType);
                    if (mainPnl != null) {
                        mainPnl.tableSelect(moduleInfoBean, mainHeaderPnl, isCommonModule(moduleType), isVersion2);
                        mainPnl.loadData(jsonData);
                        mainPnlcontainer.add(mainPnl, BorderLayout.CENTER);
                    }
                    mainPnlcontainer.setVisible(true);
                    mainPnlcontainer.updateUI();
                } catch (Exception e) {
                    removeMainPnl();
                    throw new RuntimeException(e);
                }
            }
        }, new Do4objs() {
            @Override
            public void do4ojbs(Object... objs) throws Exception {
                if (moduleInfoBean != null) {
                    String callparam = moduleInfoBean.getValue("callparam");
                    if (StringUtils.nullOrBlank(callparam) || !(callparam.endsWith("commonsimple.do") || callparam.endsWith("customservicedatasource.do") || callparam.endsWith("commonbuttonevent.do"))) {
                        moduleCatalogBean.setItem("module_type", "(不适合修改)");
                        moduleCatalogBean.setToString(MODULE_TOSTRING);
                        moduleTreePnl.selectNodeChange();
                        throw new RuntimeException("此组件不适合修改:callparam=" + moduleInfoBean.getValue("callparam"));
                    }
                }
            }
        });
    }


    public static final String TABLE_NAME = "tablename";


    public static JsonObject getInputParamObj(BeanDto moduleInfoBean) {
        String inparam = moduleInfoBean.getValue(InparamTableDelegateAbs.INPARAM_PROPNAME);
        if (!Strings.isNullOrEmpty(inparam)) {
            inparam = new String(Base64.decode(inparam));
            JsonElement inparamEle = PubUtil.parseJson(inparam);
            if (inparamEle != null) {
                return inparamEle.getAsJsonObject();
            }
        }
        return null;
    }

}
