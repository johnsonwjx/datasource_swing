/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package youngfriend;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import youngfriend.gui.MaskDlg;
import youngfriend.login.LoginDlg;
import youngfriend.main_pnl.MainPnlFactory;
import youngfriend.moduletree.ModuleTreePnl;
import youngfriend.toolbar.AppToolBar;
import youngfriend.utils.Do4objs;
import youngfriend.utils.PubUtil;

import javax.swing.JToolBar;
import javax.swing.SwingWorker;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Frame;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

/**
 * @author xiong
 */
public class App extends javax.swing.JFrame {
    //TODO 分离 模块
    public static Border border = new LineBorder(Color.GRAY);
    private static final Logger logger = LoggerFactory.getLogger(App.class);

    /**
     * Creates new form App
     */
    private App() {
        initComponents();
        initPanel();
        pack();
        setLocationRelativeTo(null);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent windowEvent) {
                AppToolBar.closeApp();
            }
        });
        setVisible(true);
        setExtendedState(Frame.MAXIMIZED_BOTH);
    }


    //

    /**
     * This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bottom = new javax.swing.JPanel();
        mainSp = new javax.swing.JSplitPane();
        main = new javax.swing.JPanel();
        mainPnlcontainer = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("数据源工具(简单版)");
        setSize(new java.awt.Dimension(800, 800));

        bottom.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bottom.setPreferredSize(new java.awt.Dimension(100, 10));
        getContentPane().add(bottom, java.awt.BorderLayout.PAGE_END);

        mainSp.setDividerLocation(300);
        mainSp.setOneTouchExpandable(true);

        main.setLayout(new java.awt.BorderLayout());

        mainPnlcontainer.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        mainPnlcontainer.setLayout(new java.awt.BorderLayout());
        main.add(mainPnlcontainer, java.awt.BorderLayout.CENTER);

        mainSp.setRightComponent(main);

        getContentPane().add(mainSp, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        LoginDlg loginDlg = new LoginDlg();
        if (!loginDlg.isOk()) {
            return;
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                App.startApp();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottom;
    private javax.swing.JPanel main;
    private javax.swing.JPanel mainPnlcontainer;
    private javax.swing.JSplitPane mainSp;
    // End of variables declaration//GEN-END:variables

    //
//    private void updateTreeNode() {
//        moduleCatalogBean.setItem("name", getModuleName());
//        moduleCatalogBean.removeItem("module_type");
//        moduleCatalogBean.setToString(MODULE_TOSTRING);
//        module_tree_model.nodeChanged(selectNode);
//    }
    public static App instance;


    private ModuleTreePnl moduleTreePnl;
    private JToolBar toolBar;

    private MainPnlFactory mainPnlFactory;

    /**
     * init moduleTreePnl ,   mainPnlFacctory, toolBar
     */
    private void initPanel() {
        mainPnlcontainer.setVisible(false);
        moduleTreePnl = new ModuleTreePnl();
        mainSp.setLeftComponent(moduleTreePnl);

        mainPnlFactory = new MainPnlFactory(mainPnlcontainer, moduleTreePnl);
        mainPnlFactory.setVisible(false);
        moduleTreePnl.setMainPnlFactory(mainPnlFactory);
        main.add(mainPnlFactory, BorderLayout.NORTH);

        toolBar = new AppToolBar(moduleTreePnl);
        getContentPane().add(toolBar, java.awt.BorderLayout.PAGE_START);
    }

    public static void busyDoing(final Do4objs backdo, final Do4objs enddo) {
        SwingWorker swingWorker = new SwingWorker<Void, Object>() {
            private boolean error = false;
            private String errorMsg;

            @Override
            protected Void doInBackground() {
                try {
                    backdo.do4ojbs();
                } catch (Throwable e) {
                    errorMsg = e.getMessage();
                    error = true;
                }
                return null;
            }

            @Override
            protected void done() {
                MaskDlg.unmask();
                if (error) {
                    PubUtil.showMsg(errorMsg);
                    error = false;
                    return;
                }
                if (enddo != null) {
                    try {
                        enddo.do4ojbs();
                    } catch (Exception e) {
                        logger.error(e.getMessage());
                        PubUtil.showMsg(App.instance, e.getMessage());
                    }
                }
            }
        };
        swingWorker.execute();
        MaskDlg.mask();
    }


    public static void startApp() {
        if (instance != null) {
            instance.dispose();
        }
        instance = new App();
    }

}
